
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2024  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.43 (git sha1 ead4718e5, g++ 11.4.0-1ubuntu1~22.04 -fPIC -Os)
[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Liberty frontend: /foss/pdks/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: /foss/designs/uart/src/uart.v
Parsing SystemVerilog input from `/foss/designs/uart/src/uart.v' to AST representation.
Generating RTLIL representation for module `\uart'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /foss/designs/uart/src/tx.v
Parsing SystemVerilog input from `/foss/designs/uart/src/tx.v' to AST representation.
Generating RTLIL representation for module `\tx'.
Note: Assuming pure combinatorial block at /foss/designs/uart/src/tx.v:40.1-58.4 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: /foss/designs/uart/src/rx.v
Parsing SystemVerilog input from `/foss/designs/uart/src/rx.v' to AST representation.
Generating RTLIL representation for module `\rx'.
Note: Assuming pure combinatorial block at /foss/designs/uart/src/rx.v:59.1-81.4 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: /foss/designs/uart/src/bitrate.v
Parsing SystemVerilog input from `/foss/designs/uart/src/bitrate.v' to AST representation.
Generating RTLIL representation for module `\bitrate'.
Successfully finished Verilog frontend.

6. Executing HIERARCHY pass (managing design hierarchy).

6.1. Analyzing design hierarchy..
Top module:  \uart
Used module:     \rx
Used module:     \tx
Used module:     \bitrate

6.2. Analyzing design hierarchy..
Top module:  \uart
Used module:     \rx
Used module:     \tx
Used module:     \bitrate
Removed 0 unused modules.

7. Generating Graphviz representation of design.
Writing dot description to `/foss/designs/uart/runs/RUN_2024-11-22_04-45-38/06-yosys-synthesis/hierarchy.dot'.
Dumping module uart to page 1.
Renaming module uart to uart.

8. Executing TRIBUF pass.

9. Executing HIERARCHY pass (managing design hierarchy).

9.1. Analyzing design hierarchy..
Top module:  \uart
Used module:     \rx
Used module:     \tx
Used module:     \bitrate

9.2. Analyzing design hierarchy..
Top module:  \uart
Used module:     \rx
Used module:     \tx
Used module:     \bitrate
Removed 0 unused modules.

10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

11. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$/foss/designs/uart/src/rx.v:83$13 in module rx.
Marked 6 switch rules as full_case in process $proc$/foss/designs/uart/src/rx.v:59$10 in module rx.
Marked 1 switch rules as full_case in process $proc$/foss/designs/uart/src/rx.v:52$8 in module rx.
Marked 1 switch rules as full_case in process $proc$/foss/designs/uart/src/tx.v:60$6 in module tx.
Marked 5 switch rules as full_case in process $proc$/foss/designs/uart/src/tx.v:40$5 in module tx.
Marked 1 switch rules as full_case in process $proc$/foss/designs/uart/src/tx.v:33$3 in module tx.
Marked 2 switch rules as full_case in process $proc$/foss/designs/uart/src/bitrate.v:68$17 in module bitrate.
Marked 1 switch rules as full_case in process $proc$/foss/designs/uart/src/bitrate.v:46$16 in module bitrate.
Removed a total of 0 dead cases.

12. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 2 redundant assignments.
Promoted 3 assignments to connections.

13. Executing PROC_INIT pass (extract init attributes).

14. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \RST in `\rx.$proc$/foss/designs/uart/src/rx.v:83$13'.
Found async reset \RST in `\rx.$proc$/foss/designs/uart/src/rx.v:52$8'.
Found async reset \RST in `\tx.$proc$/foss/designs/uart/src/tx.v:60$6'.
Found async reset \RST in `\tx.$proc$/foss/designs/uart/src/tx.v:33$3'.
Found async reset \RST_BIT in `\bitrate.$proc$/foss/designs/uart/src/bitrate.v:68$17'.

15. Executing PROC_ROM pass (convert switches to ROMs).
Converted 1 switch.
<suppressed ~16 debug messages>

16. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\rx.$proc$/foss/designs/uart/src/rx.v:83$13'.
     1/12: $0\DATA_OUT_Rx[9:0] [9:8]
     2/12: $0\DATA_OUT_Rx[9:0] [4]
     3/12: $0\DATA_OUT_Rx[9:0] [3]
     4/12: $0\DATA_OUT_Rx[9:0] [2]
     5/12: $0\DATA_OUT_Rx[9:0] [1]
     6/12: $0\DATA_OUT_Rx[9:0] [0]
     7/12: $0\DATA_OUT_Rx[9:0] [7]
     8/12: $0\DATA_OUT_Rx[9:0] [6]
     9/12: $0\DATA_OUT_Rx[9:0] [5]
    10/12: $0\rst_bitrate[0:0]
    11/12: $0\IRQ_Rx[0:0]
    12/12: $0\UART_AVAIL[0:0]
Creating decoders for process `\rx.$proc$/foss/designs/uart/src/rx.v:59$10'.
     1/6: $6\next[3:0]
     2/6: $5\next[3:0]
     3/6: $4\next[3:0]
     4/6: $3\next[3:0]
     5/6: $2\next[3:0]
     6/6: $1\next[3:0]
Creating decoders for process `\rx.$proc$/foss/designs/uart/src/rx.v:52$8'.
     1/1: $0\state[3:0]
Creating decoders for process `\tx.$proc$/foss/designs/uart/src/tx.v:60$6'.
     1/2: $0\IRQ_Tx[0:0]
     2/2: $0\DATA_OUT_Tx[0:0]
Creating decoders for process `\tx.$proc$/foss/designs/uart/src/tx.v:40$5'.
     1/5: $5\next[3:0]
     2/5: $4\next[3:0]
     3/5: $3\next[3:0]
     4/5: $2\next[3:0]
     5/5: $1\next[3:0]
Creating decoders for process `\tx.$proc$/foss/designs/uart/src/tx.v:33$3'.
     1/1: $0\state[3:0]
Creating decoders for process `\bitrate.$proc$/foss/designs/uart/src/bitrate.v:68$17'.
     1/2: $0\counter[9:0]
     2/2: $0\uart_clock[0:0]
Creating decoders for process `\bitrate.$proc$/foss/designs/uart/src/bitrate.v:46$16'.
     1/1: $1\counter_final[9:0]

17. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\rx.\next' from process `\rx.$proc$/foss/designs/uart/src/rx.v:59$10'.
No latch inferred for signal `\tx.\next' from process `\tx.$proc$/foss/designs/uart/src/tx.v:40$5'.
No latch inferred for signal `\bitrate.\counter_final' from process `\bitrate.$proc$/foss/designs/uart/src/bitrate.v:46$16'.

18. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\rx.\UART_AVAIL' using process `\rx.$proc$/foss/designs/uart/src/rx.v:83$13'.
  created $adff cell `$procdff$260' with positive edge clock and negative level reset.
Creating register for signal `\rx.\IRQ_Rx' using process `\rx.$proc$/foss/designs/uart/src/rx.v:83$13'.
  created $adff cell `$procdff$261' with positive edge clock and negative level reset.
Creating register for signal `\rx.\DATA_OUT_Rx' using process `\rx.$proc$/foss/designs/uart/src/rx.v:83$13'.
  created $adff cell `$procdff$262' with positive edge clock and negative level reset.
Creating register for signal `\rx.\rst_bitrate' using process `\rx.$proc$/foss/designs/uart/src/rx.v:83$13'.
  created $dff cell `$procdff$265' with positive edge clock.
Creating register for signal `\rx.\state' using process `\rx.$proc$/foss/designs/uart/src/rx.v:52$8'.
  created $adff cell `$procdff$266' with positive edge clock and negative level reset.
Creating register for signal `\tx.\DATA_OUT_Tx' using process `\tx.$proc$/foss/designs/uart/src/tx.v:60$6'.
  created $adff cell `$procdff$267' with positive edge clock and negative level reset.
Creating register for signal `\tx.\IRQ_Tx' using process `\tx.$proc$/foss/designs/uart/src/tx.v:60$6'.
  created $adff cell `$procdff$268' with positive edge clock and negative level reset.
Creating register for signal `\tx.\state' using process `\tx.$proc$/foss/designs/uart/src/tx.v:33$3'.
  created $adff cell `$procdff$269' with positive edge clock and negative level reset.
Creating register for signal `\bitrate.\uart_clock' using process `\bitrate.$proc$/foss/designs/uart/src/bitrate.v:68$17'.
  created $adff cell `$procdff$270' with positive edge clock and negative level reset.
Creating register for signal `\bitrate.\counter' using process `\bitrate.$proc$/foss/designs/uart/src/bitrate.v:68$17'.
  created $adff cell `$procdff$271' with positive edge clock and negative level reset.

19. Executing PROC_MEMWR pass (convert process memory writes to cells).

20. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\rx.$proc$/foss/designs/uart/src/rx.v:83$13'.
Removing empty process `rx.$proc$/foss/designs/uart/src/rx.v:83$13'.
Found and cleaned up 6 empty switches in `\rx.$proc$/foss/designs/uart/src/rx.v:59$10'.
Removing empty process `rx.$proc$/foss/designs/uart/src/rx.v:59$10'.
Removing empty process `rx.$proc$/foss/designs/uart/src/rx.v:52$8'.
Found and cleaned up 1 empty switch in `\tx.$proc$/foss/designs/uart/src/tx.v:60$6'.
Removing empty process `tx.$proc$/foss/designs/uart/src/tx.v:60$6'.
Found and cleaned up 5 empty switches in `\tx.$proc$/foss/designs/uart/src/tx.v:40$5'.
Removing empty process `tx.$proc$/foss/designs/uart/src/tx.v:40$5'.
Removing empty process `tx.$proc$/foss/designs/uart/src/tx.v:33$3'.
Found and cleaned up 2 empty switches in `\bitrate.$proc$/foss/designs/uart/src/bitrate.v:68$17'.
Removing empty process `bitrate.$proc$/foss/designs/uart/src/bitrate.v:68$17'.
Found and cleaned up 1 empty switch in `\bitrate.$proc$/foss/designs/uart/src/bitrate.v:46$16'.
Removing empty process `bitrate.$proc$/foss/designs/uart/src/bitrate.v:46$16'.
Cleaned up 17 empty switches.

21. Executing CHECK pass (checking for obvious problems).
Checking module uart...
Checking module rx...
Checking module tx...
Checking module bitrate...
Found and reported 0 problems.

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.
Optimizing module rx.
<suppressed ~5 debug messages>
Optimizing module tx.
<suppressed ~2 debug messages>
Optimizing module bitrate.

23. Executing FLATTEN pass (flatten design).
Deleting now unused module rx.
Deleting now unused module tx.
Deleting now unused module bitrate.
<suppressed ~3 debug messages>

24. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

25. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..
Removed 7 unused cells and 62 unused wires.
<suppressed ~9 debug messages>

26. Executing OPT pass (performing simple optimizations).

26.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

26.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
<suppressed ~147 debug messages>
Removed a total of 49 cells.

26.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $flatten\uart3.$procmux$102.
    dead port 1/2 on $mux $flatten\uart3.$procmux$109.
    dead port 1/2 on $mux $flatten\uart3.$procmux$112.
    dead port 2/2 on $mux $flatten\uart3.$procmux$114.
    dead port 2/2 on $mux $flatten\uart3.$procmux$123.
    dead port 2/2 on $mux $flatten\uart3.$procmux$140.
    dead port 2/2 on $mux $flatten\uart3.$procmux$158.
    dead port 2/2 on $mux $flatten\uart2.$procmux$195.
    dead port 1/2 on $mux $flatten\uart2.$procmux$205.
    dead port 2/2 on $mux $flatten\uart2.$procmux$207.
    dead port 2/2 on $mux $flatten\uart2.$procmux$216.
    dead port 2/2 on $mux $flatten\uart2.$procmux$233.
Removed 12 multiplexer ports.
<suppressed ~19 debug messages>

26.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart.
    New ctrl vector for $pmux cell $flatten\uart2.$procmux$177: { $flatten\uart2.$procmux$188_CMP $flatten\uart2.$procmux$187_CMP $flatten\uart2.$procmux$186_CMP $flatten\uart2.$procmux$185_CMP $flatten\uart2.$procmux$184_CMP $flatten\uart2.$procmux$183_CMP $flatten\uart2.$procmux$182_CMP $flatten\uart2.$procmux$181_CMP $flatten\uart2.$procmux$180_CMP $auto$opt_reduce.cc:134:opt_pmux$276 }
    New ctrl vector for $pmux cell $flatten\uart3.$procmux$26: $auto$opt_reduce.cc:134:opt_pmux$278
    New ctrl vector for $pmux cell $flatten\uart3.$procmux$31: { $flatten\uart3.$procmux$167_CMP $auto$opt_reduce.cc:134:opt_pmux$280 }
    New ctrl vector for $pmux cell $flatten\uart3.$procmux$37: { $flatten\uart3.$procmux$168_CMP $auto$opt_reduce.cc:134:opt_pmux$282 }
    New ctrl vector for $pmux cell $flatten\uart3.$procmux$43: { $flatten\uart3.$procmux$169_CMP $auto$opt_reduce.cc:134:opt_pmux$284 }
    New ctrl vector for $pmux cell $flatten\uart3.$procmux$49: { $flatten\uart3.$procmux$170_CMP $auto$opt_reduce.cc:134:opt_pmux$286 }
    New ctrl vector for $pmux cell $flatten\uart3.$procmux$62: { $flatten\uart3.$procmux$103_CMP $auto$opt_reduce.cc:134:opt_pmux$288 }
    New ctrl vector for $pmux cell $flatten\uart3.$procmux$68: { $flatten\uart3.$procmux$115_CMP $auto$opt_reduce.cc:134:opt_pmux$290 }
    New ctrl vector for $pmux cell $flatten\uart3.$procmux$74: { $flatten\uart3.$procmux$166_CMP $auto$opt_reduce.cc:134:opt_pmux$292 }
  Optimizing cells in module \uart.
Performed a total of 9 changes.

26.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
<suppressed ~24 debug messages>
Removed a total of 8 cells.

26.6. Executing OPT_DFF pass (perform DFF optimizations).

26.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..
Removed 0 unused cells and 69 unused wires.
<suppressed ~1 debug messages>

26.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

26.9. Rerunning OPT passes. (Maybe there is more to do..)

26.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~20 debug messages>

26.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart.
Performed a total of 0 changes.

26.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
Removed a total of 0 cells.

26.13. Executing OPT_DFF pass (perform DFF optimizations).

26.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..

26.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

26.16. Finished OPT passes. (There is nothing left to do.)

27. Executing FSM pass (extract and optimize FSM).

27.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking uart.uart2.state as FSM state register:
    Circuit seems to be self-resetting.
Not marking uart.uart3.state as FSM state register:
    Circuit seems to be self-resetting.

27.2. Executing FSM_EXTRACT pass (extracting FSM from design).

27.3. Executing FSM_OPT pass (simple optimizations of FSMs).

27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..

27.5. Executing FSM_OPT pass (simple optimizations of FSMs).

27.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

27.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

27.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

28. Executing OPT pass (performing simple optimizations).

28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
Removed a total of 0 cells.

28.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~20 debug messages>

28.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart.
Performed a total of 0 changes.

28.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
Removed a total of 0 cells.

28.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\uart3.$procdff$265 ($dff) from module uart (D = 1'1, Q = \uart3.rst_bitrate).
Adding EN signal on $flatten\uart3.$procdff$262 ($adff) from module uart (D = 2'00, Q = \uart3.DATA_OUT_Rx [9:8]).
Adding EN signal on $flatten\uart3.$procdff$262 ($adff) from module uart (D = $flatten\uart3.$0\DATA_OUT_Rx[9:0] [3], Q = \uart3.DATA_OUT_Rx [3]).
Adding EN signal on $flatten\uart3.$procdff$262 ($adff) from module uart (D = $flatten\uart3.$0\DATA_OUT_Rx[9:0] [2], Q = \uart3.DATA_OUT_Rx [2]).
Adding EN signal on $flatten\uart3.$procdff$262 ($adff) from module uart (D = $flatten\uart3.$0\DATA_OUT_Rx[9:0] [1], Q = \uart3.DATA_OUT_Rx [1]).
Adding EN signal on $flatten\uart3.$procdff$262 ($adff) from module uart (D = $flatten\uart3.$0\DATA_OUT_Rx[9:0] [0], Q = \uart3.DATA_OUT_Rx [0]).
Adding EN signal on $flatten\uart3.$procdff$262 ($adff) from module uart (D = $flatten\uart3.$0\DATA_OUT_Rx[9:0] [4], Q = \uart3.DATA_OUT_Rx [4]).
Adding EN signal on $flatten\uart3.$procdff$262 ($adff) from module uart (D = $flatten\uart3.$0\DATA_OUT_Rx[9:0] [5], Q = \uart3.DATA_OUT_Rx [5]).
Adding EN signal on $flatten\uart3.$procdff$262 ($adff) from module uart (D = $flatten\uart3.$0\DATA_OUT_Rx[9:0] [6], Q = \uart3.DATA_OUT_Rx [6]).
Adding EN signal on $flatten\uart3.$procdff$262 ($adff) from module uart (D = $flatten\uart3.$0\DATA_OUT_Rx[9:0] [7], Q = \uart3.DATA_OUT_Rx [7]).
Adding EN signal on $flatten\uart3.$procdff$261 ($adff) from module uart (D = 1'1, Q = \uart3.IRQ_Rx).
Adding EN signal on $flatten\uart3.$procdff$260 ($adff) from module uart (D = 1'1, Q = \uart3.UART_AVAIL).
Adding EN signal on $flatten\uart2.$procdff$268 ($adff) from module uart (D = 1'1, Q = \uart2.IRQ_Tx).
Adding EN signal on $flatten\uart2.$procdff$267 ($adff) from module uart (D = $flatten\uart2.$0\DATA_OUT_Tx[0:0], Q = \uart2.DATA_OUT_Tx).
Adding EN signal on $flatten\uart1.$procdff$271 ($adff) from module uart (D = $flatten\uart1.$procmux$250_Y, Q = \uart1.counter).
Adding EN signal on $flatten\uart1.$procdff$270 ($adff) from module uart (D = $flatten\uart1.$not$/foss/designs/uart/src/bitrate.v:74$20_Y, Q = \uart1.uart_clock).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$294 ($adffe) from module uart.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$294 ($adffe) from module uart.
Setting constant 1-bit at position 0 on $auto$ff.cc:266:slice$293 ($dffe) from module uart.

28.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..
Removed 8 unused cells and 7 unused wires.
<suppressed ~9 debug messages>

28.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.
<suppressed ~10 debug messages>

28.9. Rerunning OPT passes. (Maybe there is more to do..)

28.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

28.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart.
Performed a total of 0 changes.

28.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

28.13. Executing OPT_DFF pass (perform DFF optimizations).

28.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

28.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

28.16. Rerunning OPT passes. (Maybe there is more to do..)

28.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

28.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart.
Performed a total of 0 changes.

28.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
Removed a total of 0 cells.

28.20. Executing OPT_DFF pass (perform DFF optimizations).

28.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..

28.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

28.23. Finished OPT passes. (There is nothing left to do.)

29. Executing WREDUCE pass (reducing word size of cells).
Removed top 28 address bits (of 32) from memory init port uart.$flatten\uart1.$auto$mem.cc:328:emit$25 ($flatten\uart1.$auto$proc_rom.cc:155:do_switch$23).
Removed top 3 bits (of 4) from mux cell uart.$flatten\uart2.$procmux$231 ($mux).
Removed top 3 bits (of 4) from mux cell uart.$flatten\uart2.$procmux$193 ($mux).
Removed top 3 bits (of 4) from port B of cell uart.$flatten\uart2.$procmux$188_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell uart.$flatten\uart2.$procmux$187_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell uart.$flatten\uart2.$procmux$186_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell uart.$flatten\uart2.$procmux$185_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell uart.$flatten\uart2.$procmux$184_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell uart.$flatten\uart2.$procmux$183_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell uart.$flatten\uart2.$procmux$182_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell uart.$flatten\uart3.$procmux$171_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell uart.$flatten\uart3.$procmux$170_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell uart.$flatten\uart3.$procmux$169_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell uart.$flatten\uart3.$procmux$168_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell uart.$flatten\uart3.$procmux$167_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell uart.$flatten\uart3.$procmux$166_CMP0 ($eq).
Removed top 3 bits (of 4) from mux cell uart.$flatten\uart3.$procmux$156 ($mux).
Removed top 3 bits (of 4) from port B of cell uart.$flatten\uart3.$procmux$141_CMP0 ($eq).
Removed top 2 bits (of 4) from mux cell uart.$flatten\uart3.$procmux$121 ($mux).
Removed top 3 bits (of 4) from mux cell uart.$flatten\uart3.$procmux$100 ($mux).
Removed top 3 bits (of 4) from wire uart.$flatten\uart2.$2\next[3:0].
Removed top 3 bits (of 4) from wire uart.$flatten\uart2.$4\next[3:0].
Removed top 2 bits (of 10) from wire uart.$flatten\uart3.$0\DATA_OUT_Rx[9:0].
Removed top 3 bits (of 4) from wire uart.$flatten\uart3.$2\next[3:0].
Removed top 2 bits (of 4) from wire uart.$flatten\uart3.$4\next[3:0].
Removed top 3 bits (of 4) from wire uart.$flatten\uart3.$6\next[3:0].

30. Executing PEEPOPT pass (run peephole optimizers).

31. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

32. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module uart:
  creating $macc model for $flatten\uart1.$add$/foss/designs/uart/src/bitrate.v:77$21 ($add).
  creating $alu model for $macc $flatten\uart1.$add$/foss/designs/uart/src/bitrate.v:77$21.
  creating $alu cell for $flatten\uart1.$add$/foss/designs/uart/src/bitrate.v:77$21: $auto$alumacc.cc:485:replace_alu$335
  created 1 $alu and 0 $macc cells.

33. Executing SHARE pass (SAT-based resource sharing).

34. Executing OPT pass (performing simple optimizations).

34.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

34.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
Removed a total of 0 cells.

34.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

34.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart.
Performed a total of 0 changes.

34.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

34.6. Executing OPT_DFF pass (perform DFF optimizations).

34.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

34.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

34.9. Rerunning OPT passes. (Maybe there is more to do..)

34.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

34.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart.
Performed a total of 0 changes.

34.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
Removed a total of 0 cells.

34.13. Executing OPT_DFF pass (perform DFF optimizations).

34.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..

34.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

34.16. Finished OPT passes. (There is nothing left to do.)

35. Executing MEMORY pass.

35.1. Executing OPT_MEM pass (optimize memories).
uart.$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23: removing const-0 lane 0
Performed a total of 1 transformations.

35.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

35.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

35.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

35.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23'[0] in module `\uart': no output FF found.
Checking read port address `$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23'[0] in module `\uart': no address FF found.

35.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..

35.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

35.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

35.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..

35.10. Executing MEMORY_COLLECT pass (generating $mem cells).

36. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.
<suppressed ~16 debug messages>

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
<suppressed ~18 debug messages>
Removed a total of 6 cells.

37.3. Executing OPT_DFF pass (perform DFF optimizations).

37.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..
Removed 2 unused cells and 4 unused wires.
<suppressed ~3 debug messages>

37.5. Finished fast OPT passes.

38. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory $flatten\uart1.$auto$proc_rom.cc:155:do_switch$23 in module \uart:
  created 16 $dff cells and 0 static cells of width 9.
  read interface: 0 $dff and 15 $mux cells.
  write interface: 0 write mux blocks.

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.
<suppressed ~3 debug messages>

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
Removed a total of 0 cells.

39.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

39.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart.
    Consolidated identical input bits for $mux cell $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][3][3]$370:
      Old ports: A=9'011001000, B=9'011100001, Y=$memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][1]$b$354
      New ports: A=2'10, B=2'01, Y={ $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][1]$b$354 [3] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][1]$b$354 [0] }
      New connections: { $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][1]$b$354 [8:4] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][1]$b$354 [2:1] } = { 3'011 $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][1]$b$354 [0] 3'000 }
    Consolidated identical input bits for $mux cell $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][3][2]$367:
      Old ports: A=9'010010110, B=9'010101111, Y=$memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][1]$a$353
      New ports: A=2'10, B=2'01, Y={ $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][1]$a$353 [4] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][1]$a$353 [0] }
      New connections: { $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][1]$a$353 [8:5] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][1]$a$353 [3:1] } = { 3'010 $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][1]$a$353 [0] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][1]$a$353 [0] 2'11 }
    Consolidated identical input bits for $mux cell $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][3][1]$364:
      Old ports: A=9'000001010, B=9'001111101, Y=$memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$b$351
      New ports: A=2'10, B=2'01, Y=$memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$b$351 [1:0]
      New connections: $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$b$351 [8:2] = { 2'00 $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$b$351 [0] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$b$351 [0] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$b$351 [0] 1'1 $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$b$351 [0] }
    Consolidated identical input bits for $mux cell $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][3][0]$361:
      Old ports: A=9'000110010, B=9'001001011, Y=$memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$a$350
      New ports: A=2'10, B=2'01, Y={ $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$a$350 [4] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$a$350 [0] }
      New connections: { $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$a$350 [8:5] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$a$350 [3:1] } = { 2'00 $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$a$350 [0] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$a$350 [4] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$a$350 [0] 2'01 }
    Consolidated identical input bits for $mux cell $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][3][4]$373:
      Old ports: A=9'011111010, B=9'100010011, Y=$memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][2]$a$356
      New ports: A=2'10, B=2'01, Y={ $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][2]$a$356 [3] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][2]$a$356 [0] }
      New connections: { $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][2]$a$356 [8:4] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][2]$a$356 [2:1] } = { $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][2]$a$356 [0] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][2]$a$356 [3] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][2]$a$356 [3] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][2]$a$356 [3] 3'101 }
    Consolidated identical input bits for $mux cell $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][3][5]$376:
      Old ports: A=9'100101100, B=9'011001000, Y=$memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][2]$b$357
      New ports: A=2'01, B=2'10, Y={ $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][2]$b$357 [6] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][2]$b$357 [2] }
      New connections: { $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][2]$b$357 [8:7] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][2]$b$357 [5:3] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][2]$b$357 [1:0] } = { $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][2]$b$357 [2] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][2]$b$357 [6] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][2]$b$357 [2] 4'0100 }
    Consolidated identical input bits for $mux cell $flatten\uart2.$procmux$214:
      Old ports: A={ 3'101 $auto$wreduce.cc:461:run$330 [0] }, B=4'1001, Y=$flatten\uart2.$3\next[3:0]
      New ports: A={ 1'1 $auto$wreduce.cc:461:run$330 [0] }, B=2'01, Y=$flatten\uart2.$3\next[3:0] [1:0]
      New connections: $flatten\uart2.$3\next[3:0] [3:2] = 2'10
    Consolidated identical input bits for $mux cell $flatten\uart3.$procmux$121:
      Old ports: A=2'11, B=2'01, Y=$auto$wreduce.cc:461:run$333 [1:0]
      New ports: A=1'1, B=1'0, Y=$auto$wreduce.cc:461:run$333 [1]
      New connections: $auto$wreduce.cc:461:run$333 [0] = 1'1
    Consolidated identical input bits for $mux cell $flatten\uart3.$procmux$138:
      Old ports: A=4'1100, B=4'0001, Y=$flatten\uart3.$3\next[3:0]
      New ports: A=2'10, B=2'01, Y={ $flatten\uart3.$3\next[3:0] [2] $flatten\uart3.$3\next[3:0] [0] }
      New connections: { $flatten\uart3.$3\next[3:0] [3] $flatten\uart3.$3\next[3:0] [1] } = { $flatten\uart3.$3\next[3:0] [2] 1'0 }
    New ctrl vector for $pmux cell $flatten\uart3.$procmux$55: $flatten\uart3.$procmux$162_CMP
  Optimizing cells in module \uart.
    Consolidated identical input bits for $mux cell $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][2]$355:
      Old ports: A=$memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][2]$a$356, B=$memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][2]$b$357, Y=$memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][1]$a$347
      New ports: A={ $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][2]$a$356 [0] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][2]$a$356 [3] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][2]$a$356 [3] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][2]$a$356 [3] 2'01 $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][2]$a$356 [0] }, B={ $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][2]$b$357 [2] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][2]$b$357 [6] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][2]$b$357 [2] 1'1 $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][2]$b$357 [2] 2'00 }, Y={ $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][1]$a$347 [8] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][1]$a$347 [6:5] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][1]$a$347 [3:0] }
      New connections: { $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][1]$a$347 [7] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][1]$a$347 [4] } = { $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][1]$a$347 [6] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][1]$a$347 [1] }
    Consolidated identical input bits for $mux cell $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][1]$352:
      Old ports: A=$memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][1]$a$353, B=$memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][1]$b$354, Y=$memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$b$345
      New ports: A={ 1'0 $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][1]$a$353 [4] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][1]$a$353 [0] 1'1 $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][1]$a$353 [0] }, B={ 2'10 $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][1]$b$354 [3] 1'0 $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][1]$b$354 [0] }, Y={ $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$b$345 [6] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$b$345 [4:3] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$b$345 [1:0] }
      New connections: { $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$b$345 [8:7] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$b$345 [5] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$b$345 [2] } = { 2'01 $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$b$345 [0] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$b$345 [1] }
    Consolidated identical input bits for $mux cell $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$349:
      Old ports: A=$memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$a$350, B=$memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$b$351, Y=$memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$a$344
      New ports: A={ $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$a$350 [4] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$a$350 [0] 2'01 $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$a$350 [0] }, B={ $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$b$351 [0] 1'1 $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$b$351 [0] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$b$351 [1:0] }, Y=$memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$a$344 [4:0]
      New connections: $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$a$344 [8:5] = { 2'00 $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$a$344 [0] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$a$344 [4] }
  Optimizing cells in module \uart.
    Consolidated identical input bits for $mux cell $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][1]$346:
      Old ports: A=$memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][1]$a$347, B=9'011001000, Y=$memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][0][0]$b$342
      New ports: A={ $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][1]$a$347 [8] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][1]$a$347 [6:5] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][1]$a$347 [3:0] }, B=7'0101000, Y={ $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][0][0]$b$342 [8] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][0][0]$b$342 [6:5] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][0][0]$b$342 [3:0] }
      New connections: { $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][0][0]$b$342 [7] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][0][0]$b$342 [4] } = { $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][0][0]$b$342 [6] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][0][0]$b$342 [1] }
    Consolidated identical input bits for $mux cell $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$343:
      Old ports: A=$memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$a$344, B=$memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$b$345, Y=$memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][0][0]$a$341
      New ports: A={ 1'0 $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$a$344 [0] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$a$344 [4] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$a$344 [4:0] }, B={ 1'1 $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$b$345 [6] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$b$345 [0] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$b$345 [4:3] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$b$345 [1] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$b$345 [1:0] }, Y=$memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][0][0]$a$341 [7:0]
      New connections: $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][0][0]$a$341 [8] = 1'0
  Optimizing cells in module \uart.
Performed a total of 15 changes.

39.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

39.6. Executing OPT_SHARE pass.

39.7. Executing OPT_DFF pass (perform DFF optimizations).

39.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..
Removed 0 unused cells and 23 unused wires.
<suppressed ~1 debug messages>

39.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.
<suppressed ~2 debug messages>

39.10. Rerunning OPT passes. (Maybe there is more to do..)

39.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

39.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart.
    Consolidated identical input bits for $mux cell $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$349:
      Old ports: A={ $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$a$350 [5] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$a$350 [6] 2'01 $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$a$350 [6] }, B={ $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$a$350 [6] 1'1 $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$a$350 [6:5] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$a$350 [6] }, Y={ $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$a$344 [5] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$a$344 [3:1] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$a$344 [6] }
      New ports: A={ $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$a$350 [5] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$a$350 [6] 2'01 }, B={ $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$a$350 [6] 1'1 $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$a$350 [6:5] }, Y={ $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$a$344 [5] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$a$344 [3:1] }
      New connections: $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$a$344 [6] = $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$a$350 [6]
    Consolidated identical input bits for $mux cell $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][1]$352:
      Old ports: A={ 1'0 $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$a$350 [5] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$a$350 [6] 1'1 $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$a$350 [6] }, B={ 2'10 $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$a$350 [5] 1'0 $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$a$350 [6] }, Y={ $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$b$345 [6] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$b$345 [4:2] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$b$345 [5] }
      New ports: A={ 1'0 $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$a$350 [5] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$a$350 [6] 1'1 }, B={ 2'10 $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$a$350 [5] 1'0 }, Y={ $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$b$345 [6] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$b$345 [4:2] }
      New connections: $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$b$345 [5] = $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$a$350 [6]
  Optimizing cells in module \uart.
    Consolidated identical input bits for $mux cell $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$343:
      Old ports: A={ 1'0 $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$a$344 [6:5] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$a$344 [5] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$a$344 [3:1] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$a$344 [6] }, B={ 1'1 $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$b$345 [6:2] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$b$345 [2] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$b$345 [5] }, Y=$memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][0][0]$a$341 [7:0]
      New ports: A={ 1'0 $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$a$350 [6] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$a$344 [5] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$a$344 [5] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$a$344 [3:1] }, B={ 1'1 $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$b$345 [6] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$a$350 [6] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$b$345 [4:2] $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][1][0]$b$345 [2] }, Y=$memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][0][0]$a$341 [7:1]
      New connections: $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][0][0]$a$341 [0] = $memory$flatten\uart1.$auto$proc_rom.cc:155:do_switch$23$rdmux[0][2][0]$a$350 [6]
  Optimizing cells in module \uart.
Performed a total of 3 changes.

39.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

39.14. Executing OPT_SHARE pass.

39.15. Executing OPT_DFF pass (perform DFF optimizations).

39.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

39.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

39.18. Rerunning OPT passes. (Maybe there is more to do..)

39.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

39.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart.
Performed a total of 0 changes.

39.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
Removed a total of 0 cells.

39.22. Executing OPT_SHARE pass.

39.23. Executing OPT_DFF pass (perform DFF optimizations).

39.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..

39.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

39.26. Finished OPT passes. (There is nothing left to do.)

40. Executing TECHMAP pass (map to technology primitives).

40.1. Executing Verilog-2005 frontend: /foss/tools/yosys/yosys-0/bin/../share/yosys/techmap.v
Parsing Verilog input from `/foss/tools/yosys/yosys-0/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

40.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $adff.
Using template $paramod$73c1c7322faaaa595331a8d8d336d7d573593385\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod$eb7b5fa594d21f32e2ff3bd05b81752f0f326d5f\_90_pmux for cells of type $pmux.
Using template $paramod$754650b284649a026620fc6856e5b6886cbfe794\_90_alu for cells of type $alu.
Using template $paramod$1898f562910b1a95b1df10dbe7204af73891130f\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000001010 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~407 debug messages>

41. Executing OPT pass (performing simple optimizations).

41.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.
<suppressed ~295 debug messages>

41.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
<suppressed ~252 debug messages>
Removed a total of 84 cells.

41.3. Executing OPT_DFF pass (perform DFF optimizations).

41.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..
Removed 11 unused cells and 259 unused wires.
<suppressed ~12 debug messages>

41.5. Finished fast OPT passes.

42. Executing ABC pass (technology mapping using ABC).

42.1. Extracting gate netlist of module `\uart' to `<abc-temp-dir>/input.blif'..
Extracted 268 gates and 306 wires to a netlist network with 36 inputs and 34 outputs.

42.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

42.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       12
ABC RESULTS:             ORNOT cells:       12
ABC RESULTS:               MUX cells:       16
ABC RESULTS:               NOR cells:       18
ABC RESULTS:              XNOR cells:        4
ABC RESULTS:              NAND cells:        7
ABC RESULTS:               XOR cells:       15
ABC RESULTS:            ANDNOT cells:       54
ABC RESULTS:               NOT cells:       13
ABC RESULTS:                OR cells:       91
ABC RESULTS:        internal signals:      236
ABC RESULTS:           input signals:       36
ABC RESULTS:          output signals:       34
Removing temp directory.

43. Executing OPT pass (performing simple optimizations).

43.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.
<suppressed ~9 debug messages>

43.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

43.3. Executing OPT_DFF pass (perform DFF optimizations).

43.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..
Removed 2 unused cells and 172 unused wires.
<suppressed ~3 debug messages>

43.5. Finished fast OPT passes.

44. Executing HIERARCHY pass (managing design hierarchy).

44.1. Analyzing design hierarchy..
Top module:  \uart

44.2. Analyzing design hierarchy..
Top module:  \uart
Removed 0 unused modules.

45. Printing statistics.

=== uart ===

   Number of wires:                274
   Number of wire bits:            342
   Number of public wires:          44
   Number of public wire bits:     112
   Number of ports:                 15
   Number of port bits:             34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                271
     $_ANDNOT_                      53
     $_AND_                         12
     $_DFFE_PN0N_                    1
     $_DFFE_PN0P_                   19
     $_DFFE_PN1P_                    2
     $_DFF_PN0_                      8
     $_MUX_                         16
     $_NAND_                         7
     $_NOR_                         18
     $_NOT_                         11
     $_ORNOT_                       11
     $_OR_                          91
     $_XNOR_                         4
     $_XOR_                         15
     $scopeinfo                      3

46. Executing CHECK pass (checking for obvious problems).
Checking module uart...
Found and reported 0 problems.

47. Generating Graphviz representation of design.
Writing dot description to `/foss/designs/uart/runs/RUN_2024-11-22_04-45-38/06-yosys-synthesis/primitive_techmap.dot'.
Dumping module uart to page 1.

48. Executing OPT pass (performing simple optimizations).

48.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

48.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
Removed a total of 0 cells.

48.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

48.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart.
Performed a total of 0 changes.

48.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
Removed a total of 0 cells.

48.6. Executing OPT_DFF pass (perform DFF optimizations).

48.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..

48.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

48.9. Finished OPT passes. (There is nothing left to do.)

49. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..
Removed 3 unused cells and 24 unused wires.
<suppressed ~27 debug messages>
{
   "creator": "Yosys 0.43 (git sha1 ead4718e5, g++ 11.4.0-1ubuntu1~22.04 -fPIC -Os)",
   "invocation": "stat -json -liberty /foss/designs/uart/runs/RUN_2024-11-22_04-45-38/tmp/229f85de417b4fcaaec9d2fde05705fd.lib ",
   "modules": {
      "\\uart": {
         "num_wires":         250,
         "num_wire_bits":     290,
         "num_pub_wires":     20,
         "num_pub_wire_bits": 60,
         "num_ports":         15,
         "num_port_bits":     34,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         268,
         "num_cells_by_type": {
            "$_ANDNOT_": 53,
            "$_AND_": 12,
            "$_DFFE_PN0N_": 1,
            "$_DFFE_PN0P_": 19,
            "$_DFFE_PN1P_": 2,
            "$_DFF_PN0_": 8,
            "$_MUX_": 16,
            "$_NAND_": 7,
            "$_NOR_": 18,
            "$_NOT_": 11,
            "$_ORNOT_": 11,
            "$_OR_": 91,
            "$_XNOR_": 4,
            "$_XOR_": 15
         }
      }
   },
      "design": {
         "num_wires":         250,
         "num_wire_bits":     290,
         "num_pub_wires":     20,
         "num_pub_wire_bits": 60,
         "num_ports":         15,
         "num_port_bits":     34,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         268,
         "num_cells_by_type": {
            "$_ANDNOT_": 53,
            "$_AND_": 12,
            "$_DFFE_PN0N_": 1,
            "$_DFFE_PN0P_": 19,
            "$_DFFE_PN1P_": 2,
            "$_DFF_PN0_": 8,
            "$_MUX_": 16,
            "$_NAND_": 7,
            "$_NOR_": 18,
            "$_NOT_": 11,
            "$_ORNOT_": 11,
            "$_OR_": 91,
            "$_XNOR_": 4,
            "$_XOR_": 15
         }
      }
}

50. Printing statistics.

=== uart ===

   Number of wires:                250
   Number of wire bits:            290
   Number of public wires:          20
   Number of public wire bits:      60
   Number of ports:                 15
   Number of port bits:             34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                268
     $_ANDNOT_                      53
     $_AND_                         12
     $_DFFE_PN0N_                    1
     $_DFFE_PN0P_                   19
     $_DFFE_PN1P_                    2
     $_DFF_PN0_                      8
     $_MUX_                         16
     $_NAND_                         7
     $_NOR_                         18
     $_NOT_                         11
     $_ORNOT_                       11
     $_OR_                          91
     $_XNOR_                         4
     $_XOR_                         15

   Area for cell type $_NOT_ is unknown!
   Area for cell type $_AND_ is unknown!
   Area for cell type $_NAND_ is unknown!
   Area for cell type $_OR_ is unknown!
   Area for cell type $_NOR_ is unknown!
   Area for cell type $_XOR_ is unknown!
   Area for cell type $_XNOR_ is unknown!
   Area for cell type $_ANDNOT_ is unknown!
   Area for cell type $_ORNOT_ is unknown!
   Area for cell type $_MUX_ is unknown!
   Area for cell type $_DFF_PN0_ is unknown!
   Area for cell type $_DFFE_PN0N_ is unknown!
   Area for cell type $_DFFE_PN0P_ is unknown!
   Area for cell type $_DFFE_PN1P_ is unknown!

mapping tbuf
[INFO] Applying tri-state buffer mapping from '/foss/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v'...

51. Executing TECHMAP pass (map to technology primitives).

51.1. Executing Verilog-2005 frontend: /foss/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/foss/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

51.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

52. Executing SIMPLEMAP pass (map simple cells to gate primitives).
[INFO] Applying latch mapping from '/foss/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v'...

53. Executing TECHMAP pass (map to technology primitives).

53.1. Executing Verilog-2005 frontend: /foss/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/foss/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

53.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

54. Executing SIMPLEMAP pass (map simple cells to gate primitives).

55. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

55.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\uart':
  mapped 28 $_DFF_PN0_ cells to \sky130_fd_sc_hd__dfrtp_2 cells.
  mapped 2 $_DFF_PN1_ cells to \sky130_fd_sc_hd__dfstp_2 cells.
{
   "creator": "Yosys 0.43 (git sha1 ead4718e5, g++ 11.4.0-1ubuntu1~22.04 -fPIC -Os)",
   "invocation": "stat -json -liberty /foss/designs/uart/runs/RUN_2024-11-22_04-45-38/tmp/229f85de417b4fcaaec9d2fde05705fd.lib ",
   "modules": {
      "\\uart": {
         "num_wires":         272,
         "num_wire_bits":     312,
         "num_pub_wires":     20,
         "num_pub_wire_bits": 60,
         "num_ports":         15,
         "num_port_bits":     34,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         290,
         "area":              788.256000,
         "num_cells_by_type": {
            "$_ANDNOT_": 53,
            "$_AND_": 12,
            "$_MUX_": 38,
            "$_NAND_": 7,
            "$_NOR_": 18,
            "$_NOT_": 11,
            "$_ORNOT_": 11,
            "$_OR_": 91,
            "$_XNOR_": 4,
            "$_XOR_": 15,
            "sky130_fd_sc_hd__dfrtp_2": 28,
            "sky130_fd_sc_hd__dfstp_2": 2
         }
      }
   },
      "design": {
         "num_wires":         272,
         "num_wire_bits":     312,
         "num_pub_wires":     20,
         "num_pub_wire_bits": 60,
         "num_ports":         15,
         "num_port_bits":     34,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         290,
         "area":              788.256000,
         "num_cells_by_type": {
            "$_ANDNOT_": 53,
            "$_AND_": 12,
            "$_MUX_": 38,
            "$_NAND_": 7,
            "$_NOR_": 18,
            "$_NOT_": 11,
            "$_ORNOT_": 11,
            "$_OR_": 91,
            "$_XNOR_": 4,
            "$_XOR_": 15,
            "sky130_fd_sc_hd__dfrtp_2": 28,
            "sky130_fd_sc_hd__dfstp_2": 2
         }
      }
}

56. Printing statistics.

=== uart ===

   Number of wires:                272
   Number of wire bits:            312
   Number of public wires:          20
   Number of public wire bits:      60
   Number of ports:                 15
   Number of port bits:             34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                290
     $_ANDNOT_                      53
     $_AND_                         12
     $_MUX_                         38
     $_NAND_                         7
     $_NOR_                         18
     $_NOT_                         11
     $_ORNOT_                       11
     $_OR_                          91
     $_XNOR_                         4
     $_XOR_                         15
     sky130_fd_sc_hd__dfrtp_2       28
     sky130_fd_sc_hd__dfstp_2        2

   Area for cell type $_NOT_ is unknown!
   Area for cell type $_AND_ is unknown!
   Area for cell type $_NAND_ is unknown!
   Area for cell type $_OR_ is unknown!
   Area for cell type $_NOR_ is unknown!
   Area for cell type $_XOR_ is unknown!
   Area for cell type $_XNOR_ is unknown!
   Area for cell type $_ANDNOT_ is unknown!
   Area for cell type $_ORNOT_ is unknown!
   Area for cell type $_MUX_ is unknown!

   Chip area for module '\uart': 788.256000
     of which used for sequential elements: 788.256000 (100.00%)

[INFO] Using strategy "DELAY 1"...

57. Executing ABC pass (technology mapping using ABC).

57.1. Extracting gate netlist of module `\uart' to `/tmp/yosys-abc-a9EERS/input.blif'..
Extracted 260 gates and 308 wires to a netlist network with 47 inputs and 30 outputs.

57.1.1. Executing ABC.
Running ABC command: "/foss/tools/yosys/yosys-0/bin/yosys-abc" -s -f /tmp/yosys-abc-a9EERS/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-a9EERS/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-a9EERS/input.blif 
ABC: + read_lib -w /foss/designs/uart/runs/RUN_2024-11-22_04-45-38/tmp/229f85de417b4fcaaec9d2fde05705fd.lib 
ABC: Parsing finished successfully.  Parsing time =     0.24 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130_fd_sc_hd__tt_025C_1v80" from "/foss/designs/uart/runs/RUN_2024-11-22_04-45-38/tmp/229f85de417b4fcaaec9d2fde05705fd.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.31 sec
ABC: Memory =    9.54 MB. Time =     0.31 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /foss/designs/uart/runs/RUN_2024-11-22_04-45-38/06-yosys-synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2/Y".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /foss/designs/uart/runs/RUN_2024-11-22_04-45-38/06-yosys-synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + retime -D -D 10000.0 -M 6 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + map -p -B 0.2 -A 0.9 -M 0 
ABC: The cell areas are multiplied by the factor: <num_fanins> ^ (0.90).
ABC: The cell delays are multiplied by the factor: <num_fanins> ^ (0.20).
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + map 
ABC: + 
ABC: + retime -D -D 10000.0 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + 
ABC: + stime -p 
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: WireLoad = "none"  Gates =    177 (  4.5 %)   Cap = 12.3 ff (  1.6 %)   Area =     1714.14 ( 92.7 %)   Delay =  1412.92 ps  (  7.9 %)               
ABC: Path  0 --       9 : 0   15 pi                        A =   0.00  Df =   0.0   -0.0 ps  S =   0.0 ps  Cin =  0.0 ff  Cout =  56.8 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     129 : 4    2 sky130_fd_sc_hd__or4bb_2  A =  12.51  Df = 638.1 -463.1 ps  S = 110.6 ps  Cin =  1.5 ff  Cout =   6.8 ff  Cmax = 312.2 ff  G =  447  
ABC: Path  2 --     131 : 3    2 sky130_fd_sc_hd__a21o_2   A =   8.76  Df = 880.5 -383.7 ps  S =  49.3 ps  Cin =  2.4 ff  Cout =   6.9 ff  Cmax = 309.5 ff  G =  284  
ABC: Path  3 --     138 : 5    2 sky130_fd_sc_hd__o2111a_2 A =  12.51  Df =1018.0  -71.5 ps  S =  72.9 ps  Cin =  2.4 ff  Cout =   8.8 ff  Cmax = 299.4 ff  G =  360  
ABC: Path  4 --     177 : 4   10 sky130_fd_sc_hd__nand4_2  A =  12.51  Df =1139.3  -47.8 ps  S = 167.7 ps  Cin =  4.4 ff  Cout =  19.0 ff  Cmax = 200.5 ff  G =  423  
ABC: Path  5 --     220 : 2    1 sky130_fd_sc_hd__and2_2   A =   7.51  Df =1412.9  -27.4 ps  S = 180.8 ps  Cin =  1.5 ff  Cout =  33.4 ff  Cmax = 303.0 ff  G = 2288  
ABC: Start-point = pi8 (\bitrate [2]).  End-point = po17 ($auto$rtlil.cc:2714:MuxGate$1775).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   47/   30  lat =    0  nd =   177  edge =    561  area =626.93  delay =800.69  lev = 7
ABC: + write_blif /tmp/yosys-abc-a9EERS/output.blif 

57.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o31ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o31a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__mux2_1 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a311o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or4bb_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o22ai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nand2b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nor3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o2111a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o21ba_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o21bai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand3b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o211ai_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__o221ai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__nand4_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a21boi_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a32oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o2111ai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o2bb2ai_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__a32o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o311a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a22oi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o311ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o32a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__a41oi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a31oi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:       16
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and4bb_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__or4b_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:        6
ABC RESULTS:        internal signals:      231
ABC RESULTS:           input signals:       47
ABC RESULTS:          output signals:       30
Removing temp directory.

58. Executing SETUNDEF pass (replace undef values with defined constants).

59. Executing HILOMAP pass (mapping to constant drivers).
Warning: Selection "sky130_fd_sc_hd__conb_1" did not match any module.
Warning: Selection "LO" did not match any object.

60. Executing SPLITNETS pass (splitting up multi-bit signals).

61. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..
Removed 0 unused cells and 307 unused wires.
<suppressed ~1 debug messages>

62. Executing INSBUF pass (insert buffer cells for connected wires).
Add uart/$auto$insbuf.cc:97:execute$1978: 1'0 -> \DATA_OUT_Rx [8]
Add uart/$auto$insbuf.cc:97:execute$1979: 1'0 -> \DATA_OUT_Rx [9]
Add uart/$auto$insbuf.cc:97:execute$1980: \IRQ_Rx -> \UART_AVAIL

63. Executing CHECK pass (checking for obvious problems).
Checking module uart...
Found and reported 0 problems.
{
   "creator": "Yosys 0.43 (git sha1 ead4718e5, g++ 11.4.0-1ubuntu1~22.04 -fPIC -Os)",
   "invocation": "stat -json -liberty /foss/designs/uart/runs/RUN_2024-11-22_04-45-38/tmp/229f85de417b4fcaaec9d2fde05705fd.lib ",
   "modules": {
      "\\uart": {
         "num_wires":         210,
         "num_wire_bits":     229,
         "num_pub_wires":     41,
         "num_pub_wire_bits": 60,
         "num_ports":         15,
         "num_port_bits":     34,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         210,
         "area":              2517.414400,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__a211o_2": 3,
            "sky130_fd_sc_hd__a21bo_2": 1,
            "sky130_fd_sc_hd__a21boi_2": 3,
            "sky130_fd_sc_hd__a21o_2": 4,
            "sky130_fd_sc_hd__a21oi_2": 9,
            "sky130_fd_sc_hd__a22oi_2": 2,
            "sky130_fd_sc_hd__a311o_2": 1,
            "sky130_fd_sc_hd__a31o_2": 4,
            "sky130_fd_sc_hd__a31oi_2": 2,
            "sky130_fd_sc_hd__a32o_2": 3,
            "sky130_fd_sc_hd__a32oi_2": 1,
            "sky130_fd_sc_hd__a41oi_2": 2,
            "sky130_fd_sc_hd__and2_2": 9,
            "sky130_fd_sc_hd__and2b_2": 7,
            "sky130_fd_sc_hd__and3_2": 8,
            "sky130_fd_sc_hd__and4_2": 3,
            "sky130_fd_sc_hd__and4b_2": 1,
            "sky130_fd_sc_hd__and4bb_2": 6,
            "sky130_fd_sc_hd__buf_2": 3,
            "sky130_fd_sc_hd__dfrtp_2": 28,
            "sky130_fd_sc_hd__dfstp_2": 2,
            "sky130_fd_sc_hd__inv_2": 8,
            "sky130_fd_sc_hd__mux2_1": 3,
            "sky130_fd_sc_hd__nand2_2": 5,
            "sky130_fd_sc_hd__nand2b_2": 2,
            "sky130_fd_sc_hd__nand3_2": 5,
            "sky130_fd_sc_hd__nand3b_2": 2,
            "sky130_fd_sc_hd__nand4_2": 4,
            "sky130_fd_sc_hd__nand4b_2": 1,
            "sky130_fd_sc_hd__nor2_2": 16,
            "sky130_fd_sc_hd__nor3_2": 2,
            "sky130_fd_sc_hd__nor3b_2": 1,
            "sky130_fd_sc_hd__o2111a_2": 2,
            "sky130_fd_sc_hd__o2111ai_2": 2,
            "sky130_fd_sc_hd__o211a_2": 6,
            "sky130_fd_sc_hd__o211ai_2": 4,
            "sky130_fd_sc_hd__o21a_2": 3,
            "sky130_fd_sc_hd__o21ai_2": 8,
            "sky130_fd_sc_hd__o21ba_2": 2,
            "sky130_fd_sc_hd__o21bai_2": 1,
            "sky130_fd_sc_hd__o221ai_2": 2,
            "sky130_fd_sc_hd__o22a_2": 3,
            "sky130_fd_sc_hd__o22ai_2": 2,
            "sky130_fd_sc_hd__o2bb2a_2": 1,
            "sky130_fd_sc_hd__o2bb2ai_2": 3,
            "sky130_fd_sc_hd__o311a_2": 1,
            "sky130_fd_sc_hd__o311ai_2": 1,
            "sky130_fd_sc_hd__o31a_2": 1,
            "sky130_fd_sc_hd__o31ai_2": 1,
            "sky130_fd_sc_hd__o32a_2": 2,
            "sky130_fd_sc_hd__or3_2": 1,
            "sky130_fd_sc_hd__or3b_2": 3,
            "sky130_fd_sc_hd__or4_2": 2,
            "sky130_fd_sc_hd__or4b_2": 4,
            "sky130_fd_sc_hd__or4bb_2": 1,
            "sky130_fd_sc_hd__xnor2_2": 1,
            "sky130_fd_sc_hd__xor2_2": 2
         }
      }
   },
      "design": {
         "num_wires":         210,
         "num_wire_bits":     229,
         "num_pub_wires":     41,
         "num_pub_wire_bits": 60,
         "num_ports":         15,
         "num_port_bits":     34,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         210,
         "area":              2517.414400,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__a211o_2": 3,
            "sky130_fd_sc_hd__a21bo_2": 1,
            "sky130_fd_sc_hd__a21boi_2": 3,
            "sky130_fd_sc_hd__a21o_2": 4,
            "sky130_fd_sc_hd__a21oi_2": 9,
            "sky130_fd_sc_hd__a22oi_2": 2,
            "sky130_fd_sc_hd__a311o_2": 1,
            "sky130_fd_sc_hd__a31o_2": 4,
            "sky130_fd_sc_hd__a31oi_2": 2,
            "sky130_fd_sc_hd__a32o_2": 3,
            "sky130_fd_sc_hd__a32oi_2": 1,
            "sky130_fd_sc_hd__a41oi_2": 2,
            "sky130_fd_sc_hd__and2_2": 9,
            "sky130_fd_sc_hd__and2b_2": 7,
            "sky130_fd_sc_hd__and3_2": 8,
            "sky130_fd_sc_hd__and4_2": 3,
            "sky130_fd_sc_hd__and4b_2": 1,
            "sky130_fd_sc_hd__and4bb_2": 6,
            "sky130_fd_sc_hd__buf_2": 3,
            "sky130_fd_sc_hd__dfrtp_2": 28,
            "sky130_fd_sc_hd__dfstp_2": 2,
            "sky130_fd_sc_hd__inv_2": 8,
            "sky130_fd_sc_hd__mux2_1": 3,
            "sky130_fd_sc_hd__nand2_2": 5,
            "sky130_fd_sc_hd__nand2b_2": 2,
            "sky130_fd_sc_hd__nand3_2": 5,
            "sky130_fd_sc_hd__nand3b_2": 2,
            "sky130_fd_sc_hd__nand4_2": 4,
            "sky130_fd_sc_hd__nand4b_2": 1,
            "sky130_fd_sc_hd__nor2_2": 16,
            "sky130_fd_sc_hd__nor3_2": 2,
            "sky130_fd_sc_hd__nor3b_2": 1,
            "sky130_fd_sc_hd__o2111a_2": 2,
            "sky130_fd_sc_hd__o2111ai_2": 2,
            "sky130_fd_sc_hd__o211a_2": 6,
            "sky130_fd_sc_hd__o211ai_2": 4,
            "sky130_fd_sc_hd__o21a_2": 3,
            "sky130_fd_sc_hd__o21ai_2": 8,
            "sky130_fd_sc_hd__o21ba_2": 2,
            "sky130_fd_sc_hd__o21bai_2": 1,
            "sky130_fd_sc_hd__o221ai_2": 2,
            "sky130_fd_sc_hd__o22a_2": 3,
            "sky130_fd_sc_hd__o22ai_2": 2,
            "sky130_fd_sc_hd__o2bb2a_2": 1,
            "sky130_fd_sc_hd__o2bb2ai_2": 3,
            "sky130_fd_sc_hd__o311a_2": 1,
            "sky130_fd_sc_hd__o311ai_2": 1,
            "sky130_fd_sc_hd__o31a_2": 1,
            "sky130_fd_sc_hd__o31ai_2": 1,
            "sky130_fd_sc_hd__o32a_2": 2,
            "sky130_fd_sc_hd__or3_2": 1,
            "sky130_fd_sc_hd__or3b_2": 3,
            "sky130_fd_sc_hd__or4_2": 2,
            "sky130_fd_sc_hd__or4b_2": 4,
            "sky130_fd_sc_hd__or4bb_2": 1,
            "sky130_fd_sc_hd__xnor2_2": 1,
            "sky130_fd_sc_hd__xor2_2": 2
         }
      }
}

64. Printing statistics.

=== uart ===

   Number of wires:                210
   Number of wire bits:            229
   Number of public wires:          41
   Number of public wire bits:      60
   Number of ports:                 15
   Number of port bits:             34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                210
     sky130_fd_sc_hd__a211o_2        3
     sky130_fd_sc_hd__a21bo_2        1
     sky130_fd_sc_hd__a21boi_2       3
     sky130_fd_sc_hd__a21o_2         4
     sky130_fd_sc_hd__a21oi_2        9
     sky130_fd_sc_hd__a22oi_2        2
     sky130_fd_sc_hd__a311o_2        1
     sky130_fd_sc_hd__a31o_2         4
     sky130_fd_sc_hd__a31oi_2        2
     sky130_fd_sc_hd__a32o_2         3
     sky130_fd_sc_hd__a32oi_2        1
     sky130_fd_sc_hd__a41oi_2        2
     sky130_fd_sc_hd__and2_2         9
     sky130_fd_sc_hd__and2b_2        7
     sky130_fd_sc_hd__and3_2         8
     sky130_fd_sc_hd__and4_2         3
     sky130_fd_sc_hd__and4b_2        1
     sky130_fd_sc_hd__and4bb_2       6
     sky130_fd_sc_hd__buf_2          3
     sky130_fd_sc_hd__dfrtp_2       28
     sky130_fd_sc_hd__dfstp_2        2
     sky130_fd_sc_hd__inv_2          8
     sky130_fd_sc_hd__mux2_1         3
     sky130_fd_sc_hd__nand2_2        5
     sky130_fd_sc_hd__nand2b_2       2
     sky130_fd_sc_hd__nand3_2        5
     sky130_fd_sc_hd__nand3b_2       2
     sky130_fd_sc_hd__nand4_2        4
     sky130_fd_sc_hd__nand4b_2       1
     sky130_fd_sc_hd__nor2_2        16
     sky130_fd_sc_hd__nor3_2         2
     sky130_fd_sc_hd__nor3b_2        1
     sky130_fd_sc_hd__o2111a_2       2
     sky130_fd_sc_hd__o2111ai_2      2
     sky130_fd_sc_hd__o211a_2        6
     sky130_fd_sc_hd__o211ai_2       4
     sky130_fd_sc_hd__o21a_2         3
     sky130_fd_sc_hd__o21ai_2        8
     sky130_fd_sc_hd__o21ba_2        2
     sky130_fd_sc_hd__o21bai_2       1
     sky130_fd_sc_hd__o221ai_2       2
     sky130_fd_sc_hd__o22a_2         3
     sky130_fd_sc_hd__o22ai_2        2
     sky130_fd_sc_hd__o2bb2a_2       1
     sky130_fd_sc_hd__o2bb2ai_2      3
     sky130_fd_sc_hd__o311a_2        1
     sky130_fd_sc_hd__o311ai_2       1
     sky130_fd_sc_hd__o31a_2         1
     sky130_fd_sc_hd__o31ai_2        1
     sky130_fd_sc_hd__o32a_2         2
     sky130_fd_sc_hd__or3_2          1
     sky130_fd_sc_hd__or3b_2         3
     sky130_fd_sc_hd__or4_2          2
     sky130_fd_sc_hd__or4b_2         4
     sky130_fd_sc_hd__or4bb_2        1
     sky130_fd_sc_hd__xnor2_2        1
     sky130_fd_sc_hd__xor2_2         2

   Chip area for module '\uart': 2517.414400
     of which used for sequential elements: 788.256000 (31.31%)

65. Executing Verilog backend.
Dumping module `\uart'.

66. Executing JSON backend.

Warnings: 2 unique messages, 2 total
End of script. Logfile hash: b9c14065f5, CPU: user 3.77s system 1.00s, MEM: 46.92 MB peak
Yosys 0.43 (git sha1 ead4718e5, g++ 11.4.0-1ubuntu1~22.04 -fPIC -Os)
Time spent: 32% 7x stat (2 sec), 24% 2x abc (1 sec), ...
